name: PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-title-check:
    name: PR Title Convention Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
          requireScope: false
          subjectPattern: ^[A-Z].+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            starts with an uppercase character.

  pr-size-check:
    name: PR Size Labeling
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/xs'
          xs_max_size: '10'
          s_label: 'size/s'
          s_max_size: '100'
          m_label: 'size/m'
          m_max_size: '500'
          l_label: 'size/l'
          l_max_size: '1000'
          xl_label: 'size/xl'
          fail_if_xl: 'false'

  code-coverage-check:
    name: Code Coverage Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Run tests with coverage
        run: |
          uv run python -m pytest --cov=src/todo_cli --cov-report=xml --cov-report=term

      - name: Coverage comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: 70
          MINIMUM_ORANGE: 50

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0

  changelog-check:
    name: Changelog Updated
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if CHANGELOG.md was updated
        id: changelog
        run: |
          # Skip this check for documentation-only changes
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -qE '^(docs/|README\.md|\.github/)'; then
            echo "Documentation-only change, skipping changelog check"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if CHANGELOG.md was modified
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "CHANGELOG.md"; then
            echo "✓ CHANGELOG.md was updated"
            echo "skip=false" >> $GITHUB_OUTPUT
          else
            echo "⚠️ CHANGELOG.md was not updated. Please add an entry for this change."
            echo "skip=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        continue-on-error: true

      - name: Comment on PR if changelog missing
        if: steps.changelog.outcome == 'failure' && steps.changelog.outputs.skip == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **CHANGELOG.md not updated**\n\nPlease add an entry to CHANGELOG.md describing your changes. This helps maintain a clear project history.\n\nIf this is a documentation-only change, you can ignore this message.'
            })

  complexity-check:
    name: Code Complexity Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install radon for complexity analysis
        run: |
          pip install radon

      - name: Check cyclomatic complexity
        run: |
          echo "Checking cyclomatic complexity..."
          radon cc src/ -a -nb
          
          # Fail if any file has average complexity grade worse than C
          if radon cc src/ -na | grep -E "^[A-Z] - (D|E|F)"; then
            echo "❌ Code complexity too high. Please refactor complex functions."
            exit 1
          fi
          echo "✓ Complexity check passed"
        continue-on-error: true

      - name: Check maintainability index
        run: |
          echo "Checking maintainability index..."
          radon mi src/ -n B
          echo "✓ Maintainability check passed"
        continue-on-error: true
